#INFO: **** input file is /share/home/srwang/phf/pyphf/test.py ****
#import phf
from pyscf import gto, scf
import scipy
import numpy as np
np.set_printoptions(precision=8, linewidth=160, suppress=True)
from fch2py import fch2py
import sys

import util

xyz = sys.argv[1]
fch = sys.argv[2]

mol = gto.Mole()
#mol.atom = '''H 0. 0. 0.; H 0. 0. 2.'''
with open(xyz, 'r') as f:
    mol.atom = f.read()
print(mol.atom)
mol.basis = '3-21g'
mol.output = 'test.pylog'
mol.verbose = 4
mol.build()

mf = scf.UHF(mol)
#mf.init_guess = '1e'
mf.init_guess_breaksym = True
mf.max_cycle = 1
mf.kernel()

# read MOs from .fch(k) file
nbf = mf.mo_coeff[0].shape[0]
nif = mf.mo_coeff[0].shape[1]
S = mol.intor_symmetric('int1e_ovlp')
Sdiag = S.diagonal()
alpha_coeff = fch2py(fch, nbf, nif, Sdiag, 'a')
beta_coeff  = fch2py(fch, nbf, nif, Sdiag, 'b')
mf.mo_coeff = (alpha_coeff, beta_coeff)
# read done

#mf.mo_coeff = (
#    np.array([[0.367,-0.0839,1.25,-0.204],
#             [0.708,-0.209,-1.11,0.336],
#             [0.0212,0.171,0.165,1.30],
#             [0.0467,0.903,0.0630,-1.04]]),
#    np.array([[0.0212,0.171,0.165,1.30],
#             [0.0467,0.903,0.0630,-1.04],
#             [0.367,-0.0839,1.25,-0.204],
#             [0.708,-0.209,-1.11,0.336]])
#             )
dm = mf.make_rdm1()
mf.max_cycle = 0
mf.kernel(dm)

#Ca, Cb = mf.mo_coeff
#print(Ca)
#print(Cb)

#S = mf.get_ovlp()

mf2 = util.SUHF(mf)

X = mf2.X
na, nb = mf2.nelec

max_cycle = 15
cyc = 0
while(True):
    print('**** Cycle %d ****' % (cyc+1))
    hcore = mf.get_hcore()
    hcore_ortho = np.einsum('ji,jk,kl->il', X, hcore, X)
    #print(hcore_ortho)
    
    if cyc==0:
        veff = mf.get_veff(dm = dm)
    else:
        dm_reg = np.einsum('ij,tjk,lk->til', X, mf2.dm_ortho, X)
        veff = mf.get_veff(dm = dm_reg)
    veff_ortho = np.einsum('ji,tjk,kl->til', X, veff, X)
    print('dm (ortho)')
    print(mf2.dm_ortho)
    #print(veff)
    #Fa, Fb = hcore + veff
    #Fa_ortho = np.einsum('ji,jk,kl->il', X, Fa, X)
    #Fb_ortho = np.einsum('ji,jk,kl->il', X, Fb, X)
    Fa_ortho, Fb_ortho = hcore_ortho + veff_ortho
    print('Fock (ortho)',Fa_ortho, Fb_ortho)
    F_ortho = Fa_ortho, Fb_ortho

    e_uhf, e_uhf_coul = scf.uhf.energy_elec(mf, mf2.dm_ortho, hcore_ortho, veff_ortho)
    print('E(UHF) = %12.6f' % e_uhf)

    dm_no, dm_expanded, no = util.find_NO(mf2.dm_ortho, na, nb)
    Dg, Ng, Pg = util.get_Ng(mf2.grids, no, dm_no, na+nb)
    Gg, Pg_ortho = util.get_Gg(mf2.mol, Pg, no, X)
    xg, yg, ciS = util.get_xg(mf2, no, na, nb, Ng)
    mf2.xg, mf2.ciS = xg, ciS
    #yg, ciS = util.get_yg(mf2, xg)
    trHg, ciH = util.get_H(mf2, hcore_ortho, no, Pg, Gg, xg)
    S2 = util.get_S2(mf2, Pg_ortho)
    Xg, Xg_int, Yg = util.get_Yg(mf2, Dg, Ng, dm_no, na+nb)
    Feff_ortho, H_suhf, F_mod_ortho = util.get_Feff(mf2, trHg, Gg, Ng, Pg, dm_no, Dg, na+nb, Yg, Xg, no, F_ortho, mf2.dm_ortho)
    E_suhf = mf.energy_nuc() + H_suhf
    print('E(SUHF) = %12.6f' % E_suhf)
    mo_e, mf2.dm_ortho = util.Diag_Feff(F_mod_ortho, na, nb)
    
    cyc += 1
    if cyc >= max_cycle:
        break

#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='xcluster', release='3.10.0-693.el7.x86_64', version='#1 SMP Thu Jul 6 19:56:57 EDT 2017', machine='x86_64', processor='x86_64')  Threads 16
Python 3.7.4 (default, Aug 13 2019, 20:35:49) 
[GCC 7.3.0]
numpy 1.17.2  scipy 1.4.1
Date: Sat Oct 24 21:44:07 2020
PySCF version 1.7.3
PySCF path  /share/apps/Python/Anaconda3-2019/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   2.000000000000 AA    0.000000000000   0.000000000000   3.779452249130 Bohr

nuclear repulsion = 0.26458860546
number of shells = 4
number of NR pGTOs = 6
number of NR cGTOs = 4
basis = 3-21g
ecp = {}
CPU time:         0.80


******** <class 'pyscf.scf.uhf.UHF'> ********
method = UHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 1
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /share/home/srwang/phf/pyphf/tmpy_p2ooz0
max_memory 4000 MB (current use 92 MB)
number electrons alpha = 1  beta = 1
Set gradient conv threshold to 3.16228e-05
init E= -0.644800888259905
  alpha nocc = 1  HOMO = -0.24857392926211  LUMO = -0.090050754652471
  beta  nocc = 1  HOMO = -0.241945589148388  LUMO = -0.0916002852771504
cycle= 1 E= -0.907637635702465  delta_E= -0.263  |g|= 0.0146  |ddm|= 0.599
SCF not converged.
SCF energy = -0.907637635702465 after 1 cycles  <S^2> = 6.5934429e-07  2S+1 = 1.0000013


******** <class 'pyscf.scf.uhf.UHF'> ********
method = UHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 0
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /share/home/srwang/phf/pyphf/tmpy_p2ooz0
max_memory 4000 MB (current use 109 MB)
number electrons alpha = 1  beta = 1
Set gradient conv threshold to 3.16228e-05
init E= -0.997011811054928
  alpha nocc = 1  HOMO = -0.49432984773388  LUMO = 0.120177870807124
  beta  nocc = 1  HOMO = -0.494329847733879  LUMO = 0.120177870807124
SCF not converged.
SCF energy = -0.997011811054928 after 0 cycles  <S^2> = 0.91048142  2S+1 = 2.1545129
